{"name":"Java-lang","tagline":"Java Language support","body":"#JavaLang\r\nThis module provides marshalling, de-marshalling and handling of thread safe off heap memory through ByteBuffers.\r\n\r\nThis module is available on maven central as\r\n\r\n    <dependency>\r\n        <groupId>net.openhft</groupId>\r\n        <artifactId>lang</artifactId>\r\n        <version>6.1.1</version>\r\n    </dependency>\r\n\r\nThe version 6.x signifies that it is build for Java 6+. (It requires Java 6 update 18 or later to build)\r\n\r\n##  JavaDoc\r\nCheck out our documentation at [JavaDoc] (http://openhft.github.io/Java-Lang/apidocs/)\r\n\r\n## Working with off heap objects.\r\n\r\nJava-Lang 6.1 adds support for basic off heap data structures.  More collections types and more complex data types will be added in future versions.\r\n\r\n    public interface DataType {\r\n         // add getters and setters here\r\n    }\r\n    \r\n    // can create an array of any size (provided you have the memory) off heap.\r\n    HugeArray<DataType> array = HugeCollections.newArray(DataType.class, 10*1000*1000*1000L);\r\n    DataType dt = array.get(1111111111);\r\n    \r\n    // set data on dt\r\n    array.recycle(dt); // recycle the reference (or discard it)\r\n    \r\n    // create a ring buffer\r\n    HugeQueue<DataType> queue = HugeCollections.newQueue(DataType.class, 10*1000*1000L);\r\n    // give me a reference to an object to populate\r\n    DataType dt2 = queue.offer();\r\n    // set the values od dt2\r\n    queue.recycle(dt2);\r\n    \r\n    DataType dt3 = queue.take();\r\n    // get values\r\n    queue.recycle(dt3);\r\n    \r\nThis is designed to be largely GC-less and you can queue millions of entries with 32 MB heap and not trigger GCs.\r\n    \r\n## Working with buffers\r\nTo work with buffers there is a several options:\r\n* _ByteBufferBytes_ which wraps [java.nio.ByteBuffer](http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html)\r\n* _DirectBytes_ which is slices/records of [DirectStore](https://github.com/OpenHFT/Java-Lang/blob/master/lang/src/main/java/net/openhft/lang/io/DirectStore.java) - own implementation for offheap storage\r\n\r\nBoth classes provide functionality:\r\n* write\\read operations for primitives (writeLong(long n), readLong() etc.)\r\n* locking in native memory, so you can add thread safe constructs to your native record.\r\n* CAS operations for int and long _boolean compareAndSwapInt(long offset, int expected, int x)_, _boolean compareAndSwapLong(long offset, long expected, long x)_\r\n* addAndGetInt and getAndAddInt operations\r\n\r\n####Example\r\n    ByteBuffer byteBuffer = ByteBuffer.allocate(SIZE);\r\n    ByteBufferBytes bytes = new ByteBufferBytes(byteBuffer);\r\n    for (long i = 0; i < bytes.capacity(); i++)\r\n        bytes.writeLong(i);\r\n    for (long i = bytes.capacity()-8; i >= 0; i -= 8) {\r\n        int j = bytes.readLong(i);\r\n        assert i ==  j;\r\n    }\r\n\r\n#Building for eclipse\r\n\r\nDownload Java-Lang zip from git https://github.com/OpenHFT/Java-Lang/archive/master.zip\r\n\r\nUnzip master.zip, Java-Lang-master folder will be extracted from zip.\r\n\r\n    cd Java-Lang-master\r\n    mvn eclipse:eclipse\r\n\r\nNow you have an eclipse project, import project into Eclipse\r\n\r\nIf your Eclipse configuration is not UTF-8, after importing the project you may see some errors and strange characters in some .java files. To get rid of this problem change character enconding to UTF-8: project->properties->resource->text file encoding->utf8\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}